{"version":3,"sources":["types/user.ts","hooks/userTypeSelector.ts","store/action-creators/user.ts","types/todo.ts","store/action-creators/todo.ts","store/action-creators/index.ts","hooks/useAction.ts","components/TodoList.tsx","components/UserList.tsx","App.tsx","store/redusers/userRducer.ts","store/redusers/todoReducer.ts","store/redusers/index.ts","store/index.ts","index.tsx"],"names":["UserActionTypes","useTypedSelector","useSelector","TodoActionTypes","fethcUser","dispatch","a","type","FETCH_USERS","axios","get","response","setTimeout","FETCH_USERS_SUCCES","payload","data","FETCH_USERS_ERROR","fetchTodos","page","limit","FETCH_TODOS","params","_page","_limit","FETCH_TODOS_SUCCES","FETCH_TODOS_ERROR","setTodoPage","SET_TODO_PAGE","TodoActionCreators","UserActionCreators","useActions","useDispatch","bindActionCreators","ActionCreators","TodoList","state","todo","error","todos","loading","useEffect","map","id","title","style","display","p","onClick","border","padding","UserList","user","users","name","App","initialState","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b22064b.chunk.js","sourcesContent":["export interface UserState {\r\n    users: any[];\r\n    loading: boolean;\r\n    error: null | string;\r\n}\r\n\r\n\r\n\r\nexport enum UserActionTypes {\r\n    FETCH_USERS = 'FETCH_USERS',\r\n    FETCH_USERS_SUCCES = 'FETCH_USERS_SUCCES',\r\n    FETCH_USERS_ERROR = 'FETCH_USERS_ERROR',\r\n}\r\n\r\nexport interface FetchUsersAction {\r\n    type: UserActionTypes.FETCH_USERS;\r\n}\r\nexport interface FetchUsersSuccesAction {\r\n    type: UserActionTypes.FETCH_USERS_SUCCES;\r\n    payload: any[];\r\n}\r\nexport interface FetchUsersErrorAction {\r\n    type: UserActionTypes.FETCH_USERS_ERROR;\r\n    payload: string;\r\n}\r\n\r\nexport type UserAction = FetchUsersAction | FetchUsersSuccesAction | FetchUsersErrorAction","\r\nimport { TypedUseSelectorHook, useSelector } from 'react-redux';\r\nimport { RootState } from '../store/redusers';\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector","\r\n// https://jsonplaceholder.typicode.com/users\r\n\r\nimport axios from \"axios\"\r\nimport { Dispatch } from \"react\"\r\nimport { UserAction, UserActionTypes } from \"../../types/user\"\r\n\r\n\r\nexport const fethcUser = () => {\r\n    return async (dispatch: Dispatch<UserAction>) => {\r\n        try {\r\n            dispatch({ type: UserActionTypes.FETCH_USERS })\r\n            const response = await axios.get('https://jsonplaceholder.typicode.com/users')\r\n            setTimeout(() => {\r\n                dispatch({ type: UserActionTypes.FETCH_USERS_SUCCES, payload: response.data })\r\n            }, 500)\r\n\r\n        } catch (e) {\r\n            dispatch({\r\n                type: UserActionTypes.FETCH_USERS_ERROR,\r\n                payload: 'Error loading users',\r\n            })\r\n        }\r\n    }\r\n}","export interface TodoState {\r\n    todos: any[];\r\n    loading: boolean;\r\n    error: null | string;\r\n    page: number;\r\n    limit: number;\r\n}\r\n\r\nexport enum TodoActionTypes {\r\n    FETCH_TODOS = 'FETCH_TODOS',\r\n    FETCH_TODOS_SUCCES = 'FETCH_TODOS_SUCCES',\r\n    FETCH_TODOS_ERROR = 'FETCH_TODOS_ERROR',\r\n    SET_TODO_PAGE = 'SET_TODO_PAGE',\r\n}\r\n\r\ninterface FetchTodoAction {\r\n    type: TodoActionTypes.FETCH_TODOS\r\n}\r\ninterface FetchTodoSuccesAction {\r\n    type: TodoActionTypes.FETCH_TODOS_SUCCES;\r\n    payload: any[];\r\n}\r\ninterface FetchTodoErrorAction {\r\n    type: TodoActionTypes.FETCH_TODOS_ERROR;\r\n    payload: string;\r\n}\r\ninterface SerTodoPageAction {\r\n    type: TodoActionTypes.SET_TODO_PAGE;\r\n    payload: number\r\n}\r\n\r\nexport type TodoAction = FetchTodoAction\r\n                        | FetchTodoSuccesAction\r\n                        | FetchTodoErrorAction\r\n                        | SerTodoPageAction","import axios from \"axios\"\r\nimport { Dispatch } from \"react\"\r\nimport { TodoAction, TodoActionTypes } from \"../../types/todo\"\r\n\r\nexport const fetchTodos = (page = 1, limit = 10) => {\r\n    return async (dispatch: Dispatch<TodoAction>) => {\r\n        try {\r\n            dispatch({ type: TodoActionTypes.FETCH_TODOS })\r\n            const response = await axios.get('https://jsonplaceholder.typicode.com/todos', {\r\n                params: { _page: page, _limit: limit }\r\n            })\r\n            setTimeout(() => {\r\n                dispatch({ type: TodoActionTypes.FETCH_TODOS_SUCCES, payload: response.data })\r\n            }, 500)\r\n        } catch (e) {\r\n            dispatch({\r\n                type: TodoActionTypes.FETCH_TODOS_ERROR,\r\n                payload: 'Error loading list',\r\n            })\r\n        }\r\n    }\r\n};\r\n\r\nexport function setTodoPage(page: number): TodoAction {\r\n    return {\r\n        type: TodoActionTypes.SET_TODO_PAGE,\r\n        payload: page,\r\n    }\r\n}","import * as UserActionCreators from './user';\r\nimport * as TodoActionCreators from './todo';\r\n\r\nexport default {\r\n    ...TodoActionCreators,\r\n    ...UserActionCreators,\r\n}","\r\nimport { useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport ActionCreators from '../store/action-creators'\r\n\r\nexport const useActions = () => {\r\n    const dispatch = useDispatch();\r\n    return bindActionCreators(ActionCreators, dispatch)\r\n}","import React, { useEffect } from 'react';\r\nimport { useTypedSelector } from './../hooks/userTypeSelector';\r\nimport { useActions } from './../hooks/useAction';\r\n\r\nexport const TodoList: React.FC = () => {\r\n    const { page, error, todos, limit, loading } = useTypedSelector(state => state.todo);\r\n    const { fetchTodos, setTodoPage } = useActions();\r\n    const pages = [1, 2, 3, 4, 5];\r\n\r\n    useEffect(() => {\r\n        fetchTodos(page, limit)\r\n    }, [page])\r\n\r\n    if (loading) {\r\n        return <h1>Loading...</h1>\r\n    } if (error) {\r\n        return <h1>{error}</h1>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {todos.map(todo =>\r\n                <div key={todo.id}>{todo.id} - {todo.title}</div>\r\n            )}\r\n            <div style={{ display: 'flex' }}>\r\n                {pages.map(p =>\r\n                    <div \r\n                        onClick={()=> setTodoPage(p)}\r\n                        style={{ border: p === page ? '2px solid green' : '1px solid gray', padding: 10 }}\r\n                    >\r\n                        {p}\r\n                    </div>\r\n\r\n                )}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useTypedSelector } from '../hooks/userTypeSelector';\r\nimport { fethcUser } from '../store/action-creators/user';\r\nimport { useActions } from './../hooks/useAction';\r\n\r\nexport const UserList: React.FC = () => {\r\n    const { users, error, loading } = useTypedSelector(state => state.user);\r\n\r\n    const {fethcUser} = useActions()\r\n\r\n    useEffect(() => {\r\n        fethcUser()\r\n    }, [])\r\n\r\n    if (loading) {\r\n        return <h1>Loading...</h1>\r\n    } if (error) {\r\n        return <h1>{error}</h1>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {users.map(user => \r\n                    <div key={user.id}>{user.name}</div>\r\n                )}\r\n        </div>\r\n    )\r\n};","import { TodoList } from \"./components/TodoList\";\nimport { UserList } from \"./components/UserList\";\n\nfunction App() {\n  return (\n    <div >\n     <UserList/>\n     <hr/>\n     <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","import { UserAction, UserActionTypes, UserState } from \"../../types/user\"\r\n\r\nexport const initialState: UserState = {\r\n    users: [],\r\n    loading: false,\r\n    error: null,\r\n};\r\n\r\n\r\nexport const userReducer = (state = initialState, action: UserAction): UserState => {\r\n    switch (action.type) {\r\n        case UserActionTypes.FETCH_USERS:\r\n            return {loading: true, error: null, users: []}\r\n        case UserActionTypes.FETCH_USERS_SUCCES:\r\n            return {loading: false, error: null, users: action.payload}\r\n        case UserActionTypes.FETCH_USERS_ERROR:\r\n            return {loading: false, error: action.payload, users: []}\r\n        default: \r\n            return state\r\n    }\r\n};","import { TodoAction, TodoActionTypes, TodoState } from \"../../types/todo\";\r\n\r\nconst initialState: TodoState = {\r\n    todos: [],\r\n    page: 1,\r\n    error: null,\r\n    limit: 10,\r\n    loading: false,\r\n}\r\n\r\nexport const todoReducer = (state: TodoState = initialState, action: TodoAction): TodoState => {\r\n    switch (action.type) {\r\n        case TodoActionTypes.FETCH_TODOS:\r\n            return {...state, loading: true }\r\n        case TodoActionTypes.FETCH_TODOS_SUCCES:\r\n            return {...state, loading: false, todos: action.payload}\r\n        case TodoActionTypes.FETCH_TODOS_ERROR:\r\n            return {...state, loading: false, error: action.payload}\r\n        case TodoActionTypes.SET_TODO_PAGE:\r\n            return {...state, page: action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from \"redux\"\r\nimport { userReducer } from \"./userRducer\"\r\nimport { todoReducer } from './todoReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    user: userReducer,\r\n    todo: todoReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>","import  {applyMiddleware, createStore} from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport { rootReducer } from './redusers';\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}